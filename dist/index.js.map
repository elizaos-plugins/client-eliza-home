{"version":3,"sources":["../src/client.ts","../src/environment.ts","../src/capabilities.ts","../src/services/smart_things_api.ts","../src/config.ts","../src/entities.ts","../src/state.ts","../src/smart_home.ts","../src/utils/command_parser.ts","../src/templates.ts","../src/providers/device_state.ts","../src/actions/control_device.ts","../src/actions/discover_devices.ts","../src/providers/automation_state.ts","../src/index.ts"],"sourcesContent":["import { EventEmitter } from \"events\";\nimport {\n    IAgentRuntime,\n    Client as ElizaClient,\n    elizaLogger,\n    stringToUuid,\n    getEmbeddingZeroVector,\n    Memory,\n    // Content,\n    type Plugin,\n} from \"@elizaos/core\";\nimport { validateHomeConfig } from \"./environment.ts\";\nimport { CapabilityManager } from \"./capabilities.ts\";\nimport { EntityManager } from \"./entities.ts\";\nimport { StateManager } from \"./state.ts\";\nimport { SmartHomeManager } from \"./smart_home.ts\";\n\nimport controlDeviceAction from \"./actions/control_device.ts\";\nimport discoverDevicesAction from \"./actions/discover_devices.ts\";\nimport deviceStateProvider from \"./providers/device_state.ts\";\nimport automationStateProvider from \"./providers/automation_state.ts\";\n\n\nexport class HomeClient extends EventEmitter {\n    private runtime: IAgentRuntime;\n    private capabilityManager: CapabilityManager;\n    private entityManager: EntityManager;\n    private stateManager: StateManager;\n    private smartHomeManager: SmartHomeManager;\n\n    constructor(runtime: IAgentRuntime) {\n        super();\n        this.runtime = runtime;\n        this.initialize();\n    }\n\n    private async initialize() {\n        try {\n            const config = await validateHomeConfig(this.runtime);\n\n            this.capabilityManager = new CapabilityManager(this.runtime);\n            this.entityManager = new EntityManager(this.runtime);\n            this.stateManager = new StateManager(this.runtime);\n            this.smartHomeManager = new SmartHomeManager(this.runtime);\n\n            // Register providers\n            this.runtime.providers.push(this.stateManager.getProvider());\n            this.runtime.providers.push(deviceStateProvider);\n            this.runtime.providers.push(automationStateProvider);\n\n            // Register actions\n            this.registerActions();\n\n            // Start state monitoring\n            this.startStateMonitoring();\n\n            elizaLogger.success(\"Home Assistant client initialized successfully\");\n        } catch (error) {\n            elizaLogger.error(\"Failed to initialize Home Assistant client:\", error);\n            throw error;\n        }\n    }\n\n    private registerActions() {\n        this.runtime.registerAction(controlDeviceAction);\n        this.runtime.registerAction(discoverDevicesAction);\n    }\n\n    private startStateMonitoring() {\n        setInterval(async () => {\n            try {\n                await this.entityManager.discoverEntities();\n                elizaLogger.debug(\"Updated device states\");\n            } catch (error) {\n                elizaLogger.error(\"Failed to update device states:\", error);\n            }\n        }, 60000); // Update every minute\n    }\n\n    async handleCommand(command: string, userId: string) {\n        const roomId = stringToUuid(`home-${userId}`);\n        const userIdUUID = stringToUuid(userId);\n\n        const memory: Memory = {\n            id: stringToUuid(`command-${Date.now()}`),\n            userId: userIdUUID,\n            agentId: this.runtime.agentId,\n            roomId,\n            content: {\n                text: command,\n                source: \"home-assistant\"\n            },\n            embedding: getEmbeddingZeroVector(),\n            createdAt: Date.now()\n        };\n\n        await this.runtime.messageManager.createMemory(memory);\n        return this.smartHomeManager.handleCommand(command, userId);\n    }\n\n    async stop() {\n        elizaLogger.warn(\"Home Assistant client does not support stopping yet\");\n    }\n}\n\nexport const HomeClientInterface: ElizaClient = {\n    name: 'home',\n    start: async (runtime: IAgentRuntime) => new HomeClient(runtime),\n};","import { IAgentRuntime } from \"@elizaos/core\";\r\nimport { z } from \"zod\";\r\n\r\nexport const homeConfigSchema = z.object({\r\n    SMARTTHINGS_TOKEN: z.string().min(1, \"SmartThings token is required\"),\r\n});\r\n\r\nexport type HomeConfig = z.infer<typeof homeConfigSchema>;\r\n\r\nexport async function validateHomeConfig(runtime: IAgentRuntime): Promise<HomeConfig> {\r\n    try {\r\n        const config = {\r\n            SMARTTHINGS_TOKEN: runtime.getSetting(\"SMARTTHINGS_TOKEN\") || process.env.SMARTTHINGS_TOKEN,\r\n        };\r\n\r\n        return homeConfigSchema.parse(config);\r\n    } catch (error) {\r\n        if (error instanceof z.ZodError) {\r\n            const errorMessages = error.errors\r\n                .map((err) => `${err.path.join(\".\")}: ${err.message}`)\r\n                .join(\"\\n\");\r\n            throw new Error(`SmartThings configuration validation failed:\\n${errorMessages}`);\r\n        }\r\n        throw error;\r\n    }\r\n}","import { IAgentRuntime } from \"@elizaos/core\";\r\n\r\n// Define SmartThings capability interfaces\r\nexport interface SmartThingsCapability {\r\n  id: string;\r\n  version: number;\r\n}\r\n\r\nexport const CAPABILITIES = {\r\n  // Basic capabilities\r\n  SWITCH: { id: 'switch', version: 1 },\r\n  POWER_METER: { id: 'powerMeter', version: 1 },\r\n  ENERGY_METER: { id: 'energyMeter', version: 1 },\r\n\r\n  // Climate capabilities\r\n  THERMOSTAT: { id: 'thermostat', version: 1 },\r\n  TEMPERATURE_MEASUREMENT: { id: 'temperatureMeasurement', version: 1 },\r\n  HUMIDITY_MEASUREMENT: { id: 'humidityMeasurement', version: 1 },\r\n\r\n  // Lighting capabilities\r\n  SWITCH_LEVEL: { id: 'switchLevel', version: 1 },\r\n  COLOR_CONTROL: { id: 'colorControl', version: 1 },\r\n  COLOR_TEMPERATURE: { id: 'colorTemperature', version: 1 },\r\n\r\n  // Security capabilities\r\n  LOCK: { id: 'lock', version: 1 },\r\n  MOTION_SENSOR: { id: 'motionSensor', version: 1 },\r\n  CONTACT_SENSOR: { id: 'contactSensor', version: 1 },\r\n  PRESENCE_SENSOR: { id: 'presenceSensor', version: 1 },\r\n\r\n  // Media capabilities\r\n  MEDIA_PLAYBACK: { id: 'mediaPlayback', version: 1 },\r\n  VOLUME: { id: 'volume', version: 1 },\r\n\r\n  // Window/Door capabilities\r\n  WINDOW_SHADE: { id: 'windowShade', version: 1 },\r\n  GARAGE_DOOR: { id: 'garageDoor', version: 1 },\r\n\r\n  // Fan capabilities\r\n  FAN_SPEED: { id: 'fanSpeed', version: 1 },\r\n\r\n  // Battery capabilities\r\n  BATTERY: { id: 'battery', version: 1 },\r\n} as const;\r\n\r\nexport type CapabilityType = keyof typeof CAPABILITIES;\r\n\r\nexport interface Capability {\r\n    interface: string;\r\n    version: string;\r\n    type: string;\r\n    properties: {\r\n        supported: Array<{\r\n            name: string;\r\n        }>;\r\n        proactivelyReported: boolean;\r\n        retrievable: boolean;\r\n    };\r\n}\r\n\r\nexport class CapabilityManager {\r\n    private runtime: IAgentRuntime;\r\n    private capabilities: Map<string, Capability>;\r\n\r\n    constructor(runtime: IAgentRuntime) {\r\n        this.runtime = runtime;\r\n        this.capabilities = new Map();\r\n        this.initializeCapabilities();\r\n    }\r\n\r\n    private initializeCapabilities() {\r\n        // Add standard capabilities\r\n        this.addCapability({\r\n            interface: \"Alexa.PowerController\",\r\n            version: \"3\",\r\n            type: \"AlexaInterface\",\r\n            properties: {\r\n                supported: [{ name: \"powerState\" }],\r\n                proactivelyReported: true,\r\n                retrievable: true,\r\n            },\r\n        });\r\n\r\n        this.addCapability({\r\n            interface: \"Alexa.BrightnessController\",\r\n            version: \"3\",\r\n            type: \"AlexaInterface\",\r\n            properties: {\r\n                supported: [{ name: \"brightness\" }],\r\n                proactivelyReported: true,\r\n                retrievable: true,\r\n            },\r\n        });\r\n\r\n        // Add more capabilities as needed\r\n    }\r\n\r\n    addCapability(capability: Capability) {\r\n        this.capabilities.set(capability.interface, capability);\r\n    }\r\n\r\n    getCapability(interfaceName: string): Capability | undefined {\r\n        return this.capabilities.get(interfaceName);\r\n    }\r\n\r\n    getAllCapabilities(): Capability[] {\r\n        return Array.from(this.capabilities.values());\r\n    }\r\n}","import { IAgentRuntime } from \"@elizaos/core\";\r\nimport { retryWithBackoff } from \"../utils\";\r\n\r\nexport class SmartThingsApi {\r\n  private baseUrl = 'https://api.smartthings.com/v1';\r\n  private token: string;\r\n\r\n  constructor(runtime: IAgentRuntime) {\r\n    this.token = runtime.getSetting(\"SMARTTHINGS_TOKEN\");\r\n    if (!this.token) {\r\n      throw new Error(\"SmartThings token is required\");\r\n    }\r\n  }\r\n\r\n  private async request(endpoint: string, options: RequestInit = {}) {\r\n    const url = `${this.baseUrl}${endpoint}`;\r\n    const response = await fetch(url, {\r\n      ...options,\r\n      headers: {\r\n        'Authorization': `Bearer ${this.token}`,\r\n        'Content-Type': 'application/json',\r\n        ...options.headers,\r\n      },\r\n    });\r\n\r\n    if (!response.ok) {\r\n      throw new Error(`SmartThings API error: ${response.statusText}`);\r\n    }\r\n\r\n    return response.json();\r\n  }\r\n\r\n  devices = {\r\n    list: () => this.request('/devices'),\r\n    get: (deviceId: string) => this.request(`/devices/${deviceId}`),\r\n    getStatus: (deviceId: string) => this.request(`/devices/${deviceId}/status`),\r\n    executeCommand: (deviceId: string, command: any) =>\r\n      this.request(`/devices/${deviceId}/commands`, {\r\n        method: 'POST',\r\n        body: JSON.stringify({\r\n          commands: [command]\r\n        })\r\n      }),\r\n    executeCommands: (deviceId: string, commands: any[]) =>\r\n      this.request(`/devices/${deviceId}/commands`, {\r\n        method: 'POST',\r\n        body: JSON.stringify({ commands })\r\n      }),\r\n    getComponents: (deviceId: string) =>\r\n      this.request(`/devices/${deviceId}/components`),\r\n    getCapabilities: (deviceId: string) =>\r\n      this.request(`/devices/${deviceId}/capabilities`)\r\n  };\r\n\r\n  scenes = {\r\n    list: () => this.request('/scenes'),\r\n    execute: (sceneId: string) =>\r\n      this.request(`/scenes/${sceneId}/execute`, {\r\n        method: 'POST'\r\n      })\r\n  };\r\n\r\n  rooms = {\r\n    list: () => this.request('/rooms'),\r\n    get: (roomId: string) => this.request(`/rooms/${roomId}`)\r\n  };\r\n}\r\n\r\nexport const smartThingsApi = new SmartThingsApi(null as any); // Will be initialized later","export const DEFAULT_CONFIG = {\r\n    DISCOVERY_INTERVAL: 300000, // 5 minutes\r\n    STATE_UPDATE_INTERVAL: 60000, // 1 minute\r\n    MAX_RETRY_ATTEMPTS: 3,\r\n    RETRY_DELAY: 1000, // 1 second\r\n};\r\n\r\nexport const SUPPORTED_CAPABILITIES = [\r\n    'switch',\r\n    'light',\r\n    'thermostat',\r\n    'lock',\r\n    'colorControl',\r\n    'colorTemperature',\r\n    'motionSensor',\r\n    'contactSensor',\r\n    'mediaPlayback',\r\n];\r\n\r\nexport const CAPABILITY_MAPPINGS = {\r\n    switch: ['switch'],\r\n    light: ['switch', 'switchLevel', 'colorControl', 'colorTemperature'],\r\n    thermostat: ['thermostat', 'temperatureMeasurement', 'humidityMeasurement'],\r\n    lock: ['lock'],\r\n    motionSensor: ['motionSensor'],\r\n    contactSensor: ['contactSensor'],\r\n    presenceSensor: ['presenceSensor'],\r\n    mediaPlayer: ['mediaPlayback', 'volume'],\r\n    windowShade: ['windowShade'],\r\n    garageDoor: ['garageDoor'],\r\n    fan: ['fanSpeed', 'switch'],\r\n    powerMeter: ['powerMeter', 'energyMeter'],\r\n    battery: ['battery']\r\n};\r\n\r\nexport const DEVICE_CLASSES = {\r\n    switch: 'switch',\r\n    light: 'light',\r\n    thermostat: 'climate',\r\n    lock: 'lock',\r\n    motionSensor: 'binary_sensor',\r\n    contactSensor: 'binary_sensor',\r\n    presenceSensor: 'binary_sensor',\r\n    mediaPlayer: 'media_player',\r\n    windowShade: 'cover',\r\n    garageDoor: 'cover',\r\n    fan: 'fan',\r\n    powerMeter: 'sensor',\r\n    battery: 'sensor'\r\n};","import { IAgentRuntime } from \"@elizaos/core\";\r\nimport { SmartThingsApi } from \"./services/smart_things_api\";\r\nimport { CAPABILITY_MAPPINGS } from \"./config\";\r\n\r\nexport interface Entity {\r\n    entityId: string;\r\n    name: string;\r\n    type: string;\r\n    capabilities: string[];\r\n    state: any;\r\n}\r\n\r\nexport class EntityManager {\r\n    private runtime: IAgentRuntime;\r\n    private api: SmartThingsApi;\r\n    private entities: Map<string, Entity>;\r\n\r\n    constructor(runtime: IAgentRuntime) {\r\n        this.runtime = runtime;\r\n        this.api = new SmartThingsApi(runtime);\r\n        this.entities = new Map();\r\n    }\r\n\r\n    async discoverEntities(): Promise<void> {\r\n        try {\r\n            const devices = await this.api.devices.list();\r\n\r\n            for (const device of devices) {\r\n                const entity: Entity = {\r\n                    entityId: device.deviceId,\r\n                    name: device.label || device.name,\r\n                    type: this.determineDeviceType(device.capabilities),\r\n                    capabilities: device.capabilities.map(cap => cap.id),\r\n                    state: device.status,\r\n                };\r\n\r\n                this.entities.set(entity.entityId, entity);\r\n            }\r\n        } catch (error) {\r\n            throw new Error(`Entity discovery failed: ${error.message}`);\r\n        }\r\n    }\r\n\r\n    private determineDeviceType(capabilities: any[]): string {\r\n        // Map capabilities to device type\r\n        for (const [type, requiredCaps] of Object.entries(CAPABILITY_MAPPINGS)) {\r\n            if (requiredCaps.every(cap =>\r\n                capabilities.some(c => c.id === cap)\r\n            )) {\r\n                return type;\r\n            }\r\n        }\r\n        return 'unknown';\r\n    }\r\n\r\n    getEntity(entityId: string): Entity | undefined {\r\n        return this.entities.get(entityId);\r\n    }\r\n\r\n    getAllEntities(): Entity[] {\r\n        return Array.from(this.entities.values());\r\n    }\r\n\r\n    async updateEntityState(entityId: string, state: any): Promise<void> {\r\n        const entity = this.entities.get(entityId);\r\n        if (entity) {\r\n            entity.state = state;\r\n            this.entities.set(entityId, entity);\r\n        }\r\n    }\r\n}","import { IAgentRuntime, Provider } from \"@elizaos/core\";\r\nimport { Entity } from \"./entities.ts\";\r\n\r\nexport class StateManager {\r\n    private runtime: IAgentRuntime;\r\n    private states: Map<string, any>;\r\n\r\n    constructor(runtime: IAgentRuntime) {\r\n        this.runtime = runtime;\r\n        this.states = new Map();\r\n    }\r\n\r\n    async updateState(entityId: string, state: any): Promise<void> {\r\n        this.states.set(entityId, state);\r\n    }\r\n\r\n    getState(entityId: string): any {\r\n        return this.states.get(entityId);\r\n    }\r\n\r\n    getAllStates(): Map<string, any> {\r\n        return this.states;\r\n    }\r\n\r\n    getProvider(): Provider {\r\n        return {\r\n            name: \"home-assistant-state\",\r\n            get: async () => {\r\n                const states = Array.from(this.states.entries())\r\n                    .map(([entityId, state]) => `${entityId}: ${JSON.stringify(state)}`)\r\n                    .join('\\n');\r\n                return `Current Home Assistant States:\\n${states}`;\r\n            }\r\n        };\r\n    }\r\n}","import { IAgentRuntime, elizaLogger } from \"@elizaos/core\";\r\nimport { SmartThingsApi } from \"./services/smart_things_api\";\r\nimport { CommandParser } from \"./utils/command_parser\";\r\nimport { homeShouldRespondTemplate, homeMessageHandlerTemplate } from \"./templates\";\r\n\r\nexport class SmartHomeManager {\r\n    private runtime: IAgentRuntime;\r\n    private api: SmartThingsApi;\r\n\r\n    constructor(runtime: IAgentRuntime) {\r\n        this.runtime = runtime;\r\n        this.api = new SmartThingsApi(runtime);\r\n    }\r\n\r\n    async handleCommand(command: string, userId: string): Promise<any> {\r\n        try {\r\n            // First check if we should respond using the template\r\n            const shouldRespond = await this.runtime.llm.shouldRespond(\r\n                homeShouldRespondTemplate,\r\n                command\r\n            );\r\n\r\n            if (shouldRespond !== 'RESPOND') {\r\n                return null;\r\n            }\r\n\r\n            // Parse the command using CommandParser\r\n            const parsedCommand = CommandParser.parseCommand(command);\r\n            const deviceCommand = CommandParser.mapToDeviceCommand(\r\n                parsedCommand.command,\r\n                parsedCommand.args\r\n            );\r\n\r\n            // Execute the command\r\n            const result = await this.executeCommand(deviceCommand);\r\n\r\n            // Generate response using template\r\n            const response = await this.runtime.llm.complete(\r\n                homeMessageHandlerTemplate,\r\n                {\r\n                    command,\r\n                    result,\r\n                    homeState: await this.getCurrentState()\r\n                }\r\n            );\r\n\r\n            return {\r\n                success: true,\r\n                message: response,\r\n                data: result\r\n            };\r\n\r\n        } catch (error) {\r\n            elizaLogger.error(\"Error handling smart home command:\", error);\r\n            throw error;\r\n        }\r\n    }\r\n\r\n    private async getCurrentState(): Promise<string> {\r\n        try {\r\n            const devices = await this.api.devices.list();\r\n            return devices\r\n                .map(device => `${device.name}: ${JSON.stringify(device.status)}`)\r\n                .join('\\n');\r\n        } catch (error) {\r\n            elizaLogger.error(\"Error getting current state:\", error);\r\n            return \"Unable to fetch current state\";\r\n        }\r\n    }\r\n\r\n    private async executeCommand(deviceCommand: any): Promise<any> {\r\n        try {\r\n            return await this.api.devices.executeCommand(\r\n                deviceCommand.deviceId,\r\n                {\r\n                    capability: deviceCommand.capability,\r\n                    command: deviceCommand.command,\r\n                    arguments: deviceCommand.arguments\r\n                }\r\n            );\r\n        } catch (error) {\r\n            elizaLogger.error(\"Error executing smart home command:\", error);\r\n            throw error;\r\n        }\r\n    }\r\n}","import { DeviceCommand } from '../types/smart_things';\r\n\r\nexport class CommandParser {\r\n  private static readonly COMMAND_PATTERNS = {\r\n    turnOn: /turn on|switch on|enable/i,\r\n    turnOff: /turn off|switch off|disable/i,\r\n    setBrightness: /set brightness to (\\d+)|dim to (\\d+)|brighten to (\\d+)/i,\r\n    setTemperature: /set temperature to (\\d+)|change temp to (\\d+)/i,\r\n    setColor: /change color to (\\w+)|set color to (\\w+)/i,\r\n    lock: /lock|secure/i,\r\n    unlock: /unlock|unsecure/i,\r\n    open: /open|raise/i,\r\n    close: /close|lower/i,\r\n  };\r\n\r\n  static parseCommand(text: string): { command: string; args?: any } {\r\n    for (const [action, pattern] of Object.entries(this.COMMAND_PATTERNS)) {\r\n      const match = text.match(pattern);\r\n      if (match) {\r\n        const args = match.slice(1).find(arg => arg !== undefined);\r\n        return {\r\n          command: action,\r\n          args: args ? { value: args } : undefined\r\n        };\r\n      }\r\n    }\r\n    throw new Error('Unable to parse command');\r\n  }\r\n\r\n  static mapToDeviceCommand(command: string, args?: any): DeviceCommand {\r\n    switch (command) {\r\n      case 'turnOn':\r\n        return { capability: 'switch', command: 'on' };\r\n      case 'turnOff':\r\n        return { capability: 'switch', command: 'off' };\r\n      case 'setBrightness':\r\n        return {\r\n          capability: 'switchLevel',\r\n          command: 'setLevel',\r\n          arguments: [parseInt(args.value)]\r\n        };\r\n      case 'setTemperature':\r\n        return {\r\n          capability: 'thermostat',\r\n          command: 'setTemperature',\r\n          arguments: [parseInt(args.value)]\r\n        };\r\n      case 'setColor':\r\n        return {\r\n          capability: 'colorControl',\r\n          command: 'setColor',\r\n          arguments: [{ hex: args.value }]\r\n        };\r\n      default:\r\n        throw new Error(`Unknown command: ${command}`);\r\n    }\r\n  }\r\n}","import { messageCompletionFooter, shouldRespondFooter } from \"@elizaos/core\";\r\n\r\nexport const homeShouldRespondTemplate = `\r\n# Task: Decide if the assistant should respond to home automation requests.\r\n\r\n# Current home state:\r\n{{homeState}}\r\n\r\n# Recent message:\r\n{{message}}\r\n\r\n# Instructions: Determine if the assistant should respond to the message and control home devices.\r\nResponse options are [RESPOND], [IGNORE] and [STOP].\r\n\r\nThe assistant should:\r\n- Respond with [RESPOND] to direct home automation requests (e.g., \"turn on the lights\")\r\n- Respond with [RESPOND] to questions about device states (e.g., \"are the lights on?\")\r\n- Respond with [IGNORE] to unrelated messages\r\n- Respond with [STOP] if asked to stop controlling devices\r\n\r\nChoose the option that best describes how the assistant should respond to the message:`;\r\n\r\nexport const homeMessageHandlerTemplate = `\r\n# Task: Generate a response for a home automation request.\r\n\r\n# Current home state:\r\n{{homeState}}\r\n\r\n# User command:\r\n{{command}}\r\n\r\n# Command result:\r\n{{result}}\r\n\r\n# Instructions: Write a natural response that confirms the action taken and its result.\r\nThe response should be friendly and conversational while clearly indicating what was done.\r\n\r\nResponse:`;","import { IAgentRuntime } from \"@elizaos/core\";\r\nimport { Provider } from \"@elizaos/core\";\r\nimport { EntityManager } from \"../entities.ts\";\r\nimport { SmartThingsCapability } from '../capabilities';\r\n\r\nexport interface DeviceState {\r\n  id: string;\r\n  name: string;\r\n  capabilities: SmartThingsCapability[];\r\n  room?: string;\r\n  status: {\r\n    switch?: 'on' | 'off';\r\n    level?: number;\r\n    temperature?: number;\r\n    motion?: 'active' | 'inactive';\r\n    contact?: 'open' | 'closed';\r\n    // ... other status fields\r\n  };\r\n}\r\n\r\nexport const deviceStateProvider: Provider = {\r\n    get: async (runtime: IAgentRuntime) => {\r\n        const entityManager = new EntityManager(runtime);\r\n        await entityManager.discoverEntities();\r\n        const entities = entityManager.getAllEntities();\r\n\r\n        const deviceStates = entities\r\n            .map(entity => `${entity.name}: ${entity.state}`)\r\n            .join('\\n');\r\n\r\n        return `Current Device States:\\n${deviceStates}`;\r\n    }\r\n};\r\n\r\nexport default deviceStateProvider;\r\n\r\nexport class DeviceStateProvider {\r\n  private devices: Map<string, DeviceState> = new Map();\r\n\r\n  async updateDeviceState(deviceId: string, capability: string, value: any) {\r\n    const device = this.devices.get(deviceId);\r\n    if (!device) {\r\n      throw new Error(`Device ${deviceId} not found`);\r\n    }\r\n\r\n    // Update device status based on capability\r\n    switch (capability) {\r\n      case 'switch':\r\n        device.status.switch = value;\r\n        break;\r\n      case 'level':\r\n        device.status.level = value;\r\n        break;\r\n      // ... handle other capabilities\r\n    }\r\n\r\n    this.devices.set(deviceId, device);\r\n\r\n  }\r\n}","import {\n    Action,\n    ActionExample,\n    Content,\n    HandlerCallback,\n    IAgentRuntime,\n    Memory,\n    State,\n} from \"@elizaos/core\";\nimport { SmartHomeManager } from \"../smart_home.ts\";\nimport { smartThingsApi } from \"../services/smart_things_api.ts\";\nimport { deviceStateProvider } from \"../providers/device_state.ts\";\n\nexport const controlDeviceAction = {\n    name: \"CONTROL_DEVICE\",\n    similes: [\"DEVICE_CONTROL\", \"SMART_HOME_CONTROL\", \"HOME_CONTROL\"],\n    description: \"Controls smart home devices with specific commands\",\n    validate: async (runtime: IAgentRuntime, message: Memory) => {\n        const keywords = [\n            \"turn on\",\n            \"turn off\",\n            \"switch\",\n            \"toggle\",\n            \"set\",\n            \"change\",\n            \"adjust\",\n            \"dim\",\n            \"brighten\",\n            \"lock\",\n            \"unlock\",\n        ];\n        return keywords.some(keyword =>\n            message.content.text.toLowerCase().includes(keyword)\n        );\n    },\n    handler: async (\n        runtime: IAgentRuntime,\n        message: Memory,\n        state: State,\n        options: any,\n        callback: HandlerCallback\n    ) => {\n        const smartHomeManager = new SmartHomeManager(runtime);\n        const result = await smartHomeManager.handleCommand(message.content.text, message.userId);\n\n        const response: Content = {\n            text: `Command executed: ${result.message || \"Success\"}`,\n            action: \"DEVICE_CONTROL_RESPONSE\",\n            source: \"home-assistant\"\n        };\n\n        await callback(response);\n        return response;\n    },\n    examples: [\n        [\n            {\n                user: \"{{user1}}\",\n                content: {\n                    text: \"Turn on the living room lights\",\n                },\n            },\n            {\n                user: \"{{user2}}\",\n                content: {\n                    text: \"I'll turn on the living room lights for you\",\n                    action: \"CONTROL_DEVICE\",\n                },\n            },\n        ],\n    ] as ActionExample[][],\n} as Action;\n\nexport async function controlDevice(deviceId: string, command: string, args: any = {}) {\n  try {\n    // Map internal commands to SmartThings commands\n    const smartThingsCommand = mapCommand(command, args);\n\n    await smartThingsApi.devices.executeCommand(deviceId, smartThingsCommand);\n\n    // Update local device state\n    await deviceStateProvider.updateDeviceState(deviceId, command, args);\n\n  } catch (error) {\n    console.error(`Failed to control device ${deviceId}:`, error);\n    throw error;\n  }\n}\n\nfunction mapCommand(command: string, args: any) {\n  // Map our internal commands to SmartThings command format\n  switch (command) {\n    case 'turnOn':\n      return { capability: 'switch', command: 'on' };\n    case 'turnOff':\n      return { capability: 'switch', command: 'off' };\n    case 'setLevel':\n      return {\n        capability: 'switchLevel',\n        command: 'setLevel',\n        arguments: [args.level]\n      };\n    // ... map other commands\n    default:\n      throw new Error(`Unknown command: ${command}`);\n  }\n}\n\nexport default controlDeviceAction;","import {\r\n    Action,\r\n    ActionExample,\r\n    Content,\r\n    HandlerCallback,\r\n    IAgentRuntime,\r\n    Memory,\r\n    State,\r\n} from \"@elizaos/core\";\r\nimport { EntityManager } from \"../entities.ts\";\r\nimport { CAPABILITIES } from '../capabilities';\r\nimport { smartThingsApi } from \"../services/smart_things_api.ts\";\r\n\r\nexport const discoverDevicesAction = {\r\n    name: \"DISCOVER_DEVICES\",\r\n    similes: [\"SCAN_DEVICES\", \"FIND_DEVICES\", \"LIST_DEVICES\"],\r\n    description: \"Discovers and lists all available smart home devices\",\r\n    validate: async (runtime: IAgentRuntime, message: Memory) => {\r\n        const keywords = [\r\n            \"discover\",\r\n            \"find\",\r\n            \"scan\",\r\n            \"list\",\r\n            \"show\",\r\n            \"what\",\r\n            \"devices\",\r\n            \"lights\",\r\n            \"switches\",\r\n        ];\r\n        return keywords.some(keyword =>\r\n            message.content.text.toLowerCase().includes(keyword)\r\n        );\r\n    },\r\n    handler: async (\r\n        runtime: IAgentRuntime,\r\n        message: Memory,\r\n        state: State,\r\n        options: any,\r\n        callback: HandlerCallback\r\n    ) => {\r\n        const entityManager = new EntityManager(runtime);\r\n        await entityManager.discoverEntities();\r\n\r\n        const entities = entityManager.getAllEntities();\r\n        const deviceList = entities\r\n            .map(entity => `- ${entity.name} (${entity.entityId}): ${entity.state}`)\r\n            .join('\\n');\r\n\r\n        const response: Content = {\r\n            text: `Here are all the available devices:\\n\\n${deviceList}`,\r\n            action: \"DEVICE_LIST_RESPONSE\",\r\n            source: \"home-assistant\"\r\n        };\r\n\r\n        await callback(response);\r\n        return response;\r\n    },\r\n    examples: [\r\n        [\r\n            {\r\n                user: \"{{user1}}\",\r\n                content: {\r\n                    text: \"What devices do you see?\",\r\n                },\r\n            },\r\n            {\r\n                user: \"{{user2}}\",\r\n                content: {\r\n                    text: \"Let me check what devices are available...\",\r\n                    action: \"DISCOVER_DEVICES\",\r\n                },\r\n            },\r\n        ],\r\n    ] as ActionExample[][],\r\n} as Action;\r\n\r\nexport default discoverDevicesAction;\r\n\r\nexport async function discoverDevices() {\r\n  // Implementation to discover SmartThings devices\r\n  try {\r\n    const devices = await smartThingsApi.devices.list();\r\n\r\n    return devices.map(device => ({\r\n      id: device.deviceId,\r\n      name: device.label || device.name,\r\n      capabilities: device.capabilities.map(cap => ({\r\n        id: cap.id,\r\n        version: cap.version\r\n      })),\r\n      room: device.roomId,\r\n      status: parseDeviceStatus(device.status)\r\n    }));\r\n  } catch (error) {\r\n    console.error('Failed to discover devices:', error);\r\n    throw error;\r\n  }\r\n}\r\n\r\nfunction parseDeviceStatus(status: any) {\r\n  // Convert SmartThings status format to our internal format\r\n  const deviceStatus: any = {};\r\n\r\n  if (status.switch) {\r\n    deviceStatus.switch = status.switch.value;\r\n  }\r\n  if (status.level) {\r\n    deviceStatus.level = status.level.value;\r\n  }\r\n  // ... parse other status values\r\n\r\n  return deviceStatus;\r\n}","import { IAgentRuntime, Provider } from \"@elizaos/core\";\r\n\r\nexport const automationStateProvider: Provider = {\r\n    name: \"automation-state\",\r\n    get: async (runtime: IAgentRuntime) => {\r\n        try {\r\n            const response = await fetch(\r\n                `${runtime.getSetting(\"HOME_ASSISTANT_URL\")}/api/states`,\r\n                {\r\n                    headers: {\r\n                        Authorization: `Bearer ${runtime.getSetting(\"HOME_ASSISTANT_TOKEN\")}`,\r\n                        \"Content-Type\": \"application/json\",\r\n                    },\r\n                }\r\n            );\r\n\r\n            if (!response.ok) {\r\n                throw new Error(\"Failed to fetch automation states\");\r\n            }\r\n\r\n            const states = await response.json();\r\n            const automations = states.filter(state => state.entity_id.startsWith('automation.'));\r\n\r\n            const automationStates = automations\r\n                .map(automation => `${automation.attributes.friendly_name}: ${automation.state}`)\r\n                .join('\\n');\r\n\r\n            return `Current Automation States:\\n${automationStates}`;\r\n        } catch (error) {\r\n            return \"Unable to fetch automation states\";\r\n        }\r\n    }\r\n};\r\n\r\nexport default automationStateProvider;","import { HomeClientInterface } from \"./client\";\r\n\r\nconst homePlugin = {\r\n    name: \"home\",\r\n    description: \"Home Assistant client\",\r\n    clients: [HomeClientInterface],\r\n};\r\nexport default homePlugin;\r\n"],"mappings":"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","names":["elizaLogger","elizaLogger"]}